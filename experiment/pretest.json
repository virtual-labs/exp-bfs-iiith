{    "version": 2.0,
    "questions": [
        {
            "question": "1. Which of the following policies does a queue follow?",
            "answers": {
                "a": "FIFO - First In, First Out",
                "b": "LIFO - Last In, First Out",
                "c": "FILO - First In, Last Out",
                "d": "Random order"
            },
            "correctAnswer": "a",
            "explanations": {
                "a": "Queues can be thought of as the same queues/lines in real life where the first element/person to enter the queue is also the first to leave the queue.",
                "b": "This is the policy followed by stacks where the last element to be added is the first to be removed.",
                "c": "This is the policy followed by stacks where the last element to be added is the first to be removed or equivalently where the first element added is the last element removed.",
                "d": "Queues do follow a very specific order of insertion and deletion and not a random order."
            },
            "difficulty": "beginner"
        },
        {
            "question": "2. Which of the following describes a standard graph traversal algorithm?",
            "answers": {
                "a": "Visiting all the edges of the graph",
                "b": "Visiting all the vertices of the graph",
                "c": "Detecting all the cycles in the graph",
                "d": "None of the above"
            },
            "correctAnswer": "b",
            "explanations": {
                "a": "While a traversal algorithm may end up doing so indirectly, this is not the main objective of a standard traversal algorithm.",
                "b": "This perfectly describes the main goal achieved by traversal algorithms where we visit all the nodes/vertices to compute something or perform some operation.",
                "c": "This is more of a specific use case of a traversal algorithm but not the general objective of such algorithms, i.e, while a traversal algorithm can be used to detect cycles in the graph, that is not its primary/general purpose.",
                "d": "One of the other options does contain the correct definition/objective of graph traversal algorithms."
            },
            "difficulty": "beginner"
        },
        {
            "question": "3. Consider the following undirected graph:<br>Vertices, V = [1, 2, 3, 4, 5, 6]<br>Edges, E = [[1, 2], [1, 3], [2, 4], [2, 5], [3, 5], [3, 6]]<br>Where each array within E signifies an edge between the two mentioned vertices<br>Which of the following data structures is represented by the above graph? ",
            "answers": {
                "a": "Tree",
                "b": "Cyclic graph",
                "c": "Disconnected Graph",
                "d": "Complete Graph"
            },
            "correctAnswer": "b",
            "explanations": {
                "a": "A tree is an undirected graph that does not contain any cycles. The given graph cannot be a tree as it contains a cycle.",
                "b": "This graph does contain a cycle composed of the vertices 3, 4 and 5.",
                "c": "A disconnected graph is a graph where there does not exist any path between at least one pair of vertices. The given graph is connected, i.e, a path can be found for all pairs of vertices.",
                "d": "A complete graph is a graph where all vertices have a direct edge to all other vertices. The given graph does not fit this definition. For example, there is no edge between vertices 1 and 4."
            },
            "difficulty": "intermediate"
        },
        {
            "question": "4. Consider the following undirected graph:<br>Vertices, V = [a, b, c , d, e, f]<br>Edges, E = [[a, b], [a c], [b, d], [b, e], [c, e], [c, f]]<br>Where each array within E signifies an edge between the two mentioned vertices.<br>If we were to store this graph\u2019s vertices in a queue in the order top to bottom(parent to child) and left to right(edges that appear first in the edge matrix appear first in the queue) with \u2018a\u2019 as the root, what index would vertex \u2018e\u2019 be stored at (assume 0 indexing for the queue and no deletions)?",
            "answers": {
                "a": "2",
                "b": "3",
                "c": "4",
                "d": "5"
            },
            "correctAnswer": "c",
            "explanations": {
                "a": "This answer is probably obtained by an incorrect understanding of the question or concept at hand. It would be easier to answer this question by drawing the graph and storing the elements in the queue while traversing the drawn graph as per the mentioned rules.",
                "b": "This answer is probably obtained by an incorrect understanding of the question or concept at hand. While \u2018e\u2019 does appear in the 3rd and final layer of the graph if we were to draw the graph, the question asks for its index in the queue as per the traversal rules mentioned above. It would be easier to answer this question by drawing the graph and storing the elements in the queue while traversing the drawn graph as per the mentioned rules.",
                "c": "The queue turns out to be [a, b, c, d, e, f] as first we store \u2018a\u2019 at index 0 which is the root. Then we add \u2018b\u2019 and \u2018c\u2019 as they form the next layer as children of \u2018a\u2019 from left to right and finally we add \u2018d\u2019, \u2018e\u2019 and \u2018f\u2019 as they form the final layer as children of \u2018b\u2019 and \u2018c\u2019 from left to right.",
                "d": "This answer is probably obtained by assuming 1 indexing instead of 0 indexing. The queue turns out to be [a, b, c, d, e, f] as first we store \u2018a\u2019 at index 0 which is the root. Then we add \u2018b\u2019 and \u2018c\u2019 as they form the next layer as children of \u2018a\u2019 from left to right and finally we add \u2018d\u2019, \u2018e\u2019 and \u2018f\u2019 as they form the final layer as children of \u2018b\u2019 and \u2018c\u2019 from left to right. Here it is clearly visible that \u2018e\u2019 is stored at the 5th position whose index is given by subtracting 1 from 5 to account for the zero indexing."
            },
            "difficulty": "advanced"
        }
    ]
}
   